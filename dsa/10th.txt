#include <iostream>
#include <list>
#include <queue>
using namespace std;

class Graph {
    int V; // Number of vertices
    list<int>* adjList; // Adjacency list

public:
    Graph(int V); // Constructor
    void addEdge(int u, int v); // Add edge
    void BFS(int start); // BFS Traversal
};

Graph::Graph(int V) {
    this->V = V;
    adjList = new list<int>[V];
}

void Graph::addEdge(int u, int v) {
    adjList[u].push_back(v); // Add v to u's list
    adjList[v].push_back(u); // Since the graph is undirected
}

void Graph::BFS(int start) {
    bool* visited = new bool[V]; // Mark all nodes as unvisited
    for (int i = 0; i < V; i++) visited[i] = false;

    queue<int> q;
    visited[start] = true;
    q.push(start);

    cout << "BFS starting from vertex " << start << ": ";
    while (!q.empty()) {
        int node = q.front();
        cout << node << " ";
        q.pop();

        // Visit all adjacent vertices
        for (auto adj : adjList[node]) {
            if (!visited[adj]) {
                visited[adj] = true;
                q.push(adj);
            }
        }
    }
    cout << endl;
}

int main() {
    Graph g(6); // 6 vertices
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 5);

    g.BFS(0); // Start BFS from vertex 0

    return 0;
}












#include <iostream>
#include <list>
#include <stack>
using namespace std;

class Graph {
    int V; // Number of vertices
    list<int>* adjList; // Adjacency list

public:
    Graph(int V); // Constructor
    void addEdge(int u, int v); // Add edge
    void DFS(int start); // DFS Traversal
    void DFSUtil(int v, bool* visited); // Utility function for DFS
};

Graph::Graph(int V) {
    this->V = V;
    adjList = new list<int>[V];
}

void Graph::addEdge(int u, int v) {
    adjList[u].push_back(v); // Add v to u's list
    adjList[v].push_back(u); // Since the graph is undirected
}

void Graph::DFSUtil(int v, bool* visited) {
    visited[v] = true;
    cout << v << " ";

    // Visit all adjacent vertices
    for (auto adj : adjList[v]) {
        if (!visited[adj]) {
            DFSUtil(adj, visited);
        }
    }
}

void Graph::DFS(int start) {
    bool* visited = new bool[V]; // Mark all nodes as unvisited
    for (int i = 0; i < V; i++) visited[i] = false;

    cout << "DFS starting from vertex " << start << ": ";
    DFSUtil(start, visited);
    cout << endl;
}

int main() {
    Graph g(6); // 6 vertices
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 5);

    g.DFS(0); // Start DFS from vertex 0

    return 0;
}

